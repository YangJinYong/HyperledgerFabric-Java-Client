
# Fabric-Java-Client(Work in progress :) )
A Java based fabric client.

<b><u>Prerequsite:</u></b>

<b>1. Fabric network:</b> A running fabric network. See [this](https://hyperledger-fabric.readthedocs.io/en/release-1.2/build_network.html) tutorial to quickly bootstrap a network. To practice on this 
client, my recommendation would be to start a network on <b>IBM Blockchain Platform</b>. It enables fast and easy setup of a multi org blockchain network and yes, it is free of cost under Starter plan.
[Here](https://console.bluemix.net/docs/services/blockchain/starter_plan.html#overview) is a how you can setup a blockchain network in minutes.

<b>2. A chaincode:</b> A sample chaincode(written in Golang) is provided under config/chaincode/ directory. You have optioon to write your own.

<b>3. Connection profile:</b> The application will load a network <b>connection profile </b>(/src/com/fabric/config/network-config.json) file and then it will be used by fabric java client to simplify the steps needed to setup and use the network. The connection profile has specific addresses and settings of network items.
If your network runs on IBM Blockchain platform, then <b>Connection Profile</b> can be downloaded as shown here:

![pic](https://github.com/vishal3152/HyperledgerFabric-Java-Client/blob/master/images/image.png)

A sample connection profile has been provided under directory /src/com/fabric/config/.
A detailed documenation on how to create a connection profile for your network is availble at:
https://hyperledger.github.io/composer/latest/reference/connectionprofile

<b>4. Buildpath dependencies:</b> I am learning Maven, so expect a pom.xml in future :). For now, downlaod <b>fabric-sdk-java-1.1.0-jar-with-dependencies.jar</b> from http://central.maven.org/maven2/org/hyperledger/fabric-sdk-java/fabric-sdk-java/1.1.0/ and add it to your build path.


<b>Setting up client:</b>

<b>Step 1: Enrolling admin:</b>

When we bootstrapped our blockchain network, an admin user was <b>registered</b> with the MSP provider, fabric-ca server in our case.
Now we need usercontext of the admin for our client to perform operations on blockchain network. We need to send an enroll call to CA server and reterive the enrollment certificate(long term identity) for the admin. Later on, 
we will use this enrollment certificate to construct admin's usercontext.
To make the enroll call, we require an identity(user name) i.e. admin and its secret key. If you are using one of the samples, then secret key would be adminpw. Secret key for network running on IBM cloud platform can be found inside the connection profile,
find 'registrar' object under which 'enrollId' there is an 'enrollSecret' property. 
//code

On successful enrolment, admin user context will be saved under directory /cred.

<b>Step 1: Registering and enrolling user:</b>
Now ofcurse, we would not like to use admin user to invoke all transaction on blockchain network. We may require access control decisions in your chaincode based on the attributes of identity of the client (i.e. the invoker of the chaincode), in short called [ABAC]|(https://hyperledger-fabric-ca.readthedocs.io/en/release-1.1/users-guide.html#attribute-based-access-control)
Whole point heer is to enable other users to interact with the network. This is a two step process:
- 1. Register the user with CA:
     
     The identity performing the registeration, admin in our case, must be already enrolled and have proper access rights. As we have already enrolled admin in step 1, we would use admin usercontext to register Tau_Junior (my pet :) ) with the CA.
	 
     //code
	 
	 If registeration is successful, in retrun we will get a secretkey for Tau_Junior( or TJ inshort). We will use the secret key to enroll TJ with client in next step.
- 2. Enoll user TJ -
	 
	 On successful enrolment, usercontext for TJ will be saved under directory /cred.
	 

